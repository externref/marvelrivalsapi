{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MarvelRivalsAPI","text":"<p>Opinionated python API Wrapper for the Unofficial Marvel Rivals API.</p> <p>Warning</p> <p>Package still under development, installation commands won't work since the package is not published yet.  Use <code>git+https://github.com/externref/marvelrivals</code> as the package name to install from source.</p>"},{"location":"#get-started","title":"GET STARTED","text":"<p>Read the elaborate tutorial to start developing with <code>marvelrivalsapi</code></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy to use API interface</li> <li>Support for both blocking and <code>async</code> workflows</li> <li>Type support with <code>mypy</code> and <code>pyright</code> check</li> </ul>"},{"location":"#coverage","title":"Coverage","text":"<ul> <li> All Heroes</li> <li> Get Hero</li> <li> Hero Stats</li> <li> Hero Leaderboard</li> <li> All Costumes</li> <li> Get Costume</li> <li> Items</li> <li> Maps</li> <li> Dynamic Stat data</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#api-key","title":"API Key","text":"<p>Before anything, you'd like to get a API key from the website.</p> <p>Note</p> <p>You might want to keep the API key as an environment variable instead of pasting it directly into source code in most cases. To do this, install the <code>python-dotenv</code> library and create a <code>.env</code> file in the same directory as your code file. </p> <p>.env <pre><code>API_KEY=\"abcd1234\"\n</code></pre> main.py <pre><code>import os\n\nimport dotenv\n\ndotenv.load_dotenv()\n\nKEY = os.environ[\"API_KEY\"]\n</code></pre></p>"},{"location":"tutorial/#installing-the-library","title":"Installing the library","text":"pippoetryuv <pre><code>pip install marvelrivalsapi\n</code></pre> <pre><code>poetry add marvelrivalsapi\n</code></pre> <pre><code>uv add marvelrivalsapi\n</code></pre> <p>Use <code>pip</code> if you don't know what you're doing.</p>"},{"location":"tutorial/#first-steps","title":"First Steps","text":"<p>The client objects are the entry point to the API and you'll mostly be using them to perform all the package related tasks.</p> syncasyncasync context <pre><code>import marvelrivalsapi\n\nclient = marvelrivalsapi.MarvelRivalsClient(\"mykeyhere\")\n# rest of code\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    client = marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\")\n    # rest of code\n    await client.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    async with marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\") as client:\n        # other stuff here\n        ...\n\nasyncio.run(main())\n</code></pre>"},{"location":"tutorial/#example-fetching-a-hero-data","title":"Example: Fetching a hero data","text":"syncasync <pre><code>import marvelrivalsapi\n\nclient = marvelrivalsapi.MarvelRivalsClient(\"mykeyhere\")\nspiderman = client.get_hero(marvelrivalsapi.Heroes.SPIDER_MAN)\nprint(spiderman)\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    client = marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\")\n    spiderman = await client.get_hero(marvelrivalsapi.Heroes.SPIDER_MAN)\n    print(spiderman)\n    await client.close()\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/","title":"Client","text":"<p>Documentation related to the default and <code>async</code> client the package provides.</p> <p>MIT License</p> <p>Copyright (c) 2025 sarthak</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>MIT License</p> <p>Copyright (c) 2025 sarthak</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient","title":"<code>MarvelRivalsClient</code>","text":"<p>Client for interacting with the Marvel Rivals API.</p> <p>This client allows for fetching hero data from the Marvel Rivals API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to authenticate requests to the Marvel Rivals API.</p> required <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The HTTP client used for making requests.</p> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>@define\nclass MarvelRivalsClient:\n    \"\"\"\n    Client for interacting with the Marvel Rivals API.\n\n    This client allows for fetching hero data from the Marvel Rivals API.\n\n    Parameters\n    ----------\n    api_key : str\n        The API key to authenticate requests to the Marvel Rivals API.\n\n    Attributes\n    ----------\n    client : httpx.Client\n        The HTTP client used for making requests.\n    \"\"\"\n\n    api_key: str\n    client: httpx.Client = field(init=False)\n\n    def __attrs_post_init__(self) -&gt; None:\n        self.client = httpx.Client(headers={\"x-api-key\": self.api_key})\n\n    def throw(self, res: httpx.Response) -&gt; None:\n        raise MarvelRivalsAPIError(res)\n\n    @typing.overload\n    def get_hero(self, hero: str | Heroes, *, error: bool) -&gt; Hero: ...\n\n    @typing.overload\n    def get_hero(self, hero: str | Heroes) -&gt; Hero | None: ...\n\n    def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n        \"\"\"\n        Get a hero by name or ID.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve.\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        Hero | None\n            The hero if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n        &gt;&gt;&gt; if hero:\n        ...     print(hero.name)\n        \"\"\"\n        response = self.client.get(\n            Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            return Hero.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_all_heroes(self, *, error: bool) -&gt; list[Hero]: ...\n\n    @typing.overload\n    def get_all_heroes(\n        self,\n    ) -&gt; list[Hero] | None: ...\n\n    def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n        \"\"\"\n        Get all available heroes.\n\n        Parameters\n        ----------\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Hero] | None\n            A list of all heroes if successful, None if the request fails and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; heroes = client.get_all_heroes()\n        &gt;&gt;&gt; if heroes:\n        ...     for hero in heroes:\n        ...         print(hero.name)\n        \"\"\"\n        response = self.client.get(Endpoints.ALL_HEROES())\n        if response.status_code == 200:\n            return [Hero.from_dict(hero) for hero in response.json()]\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_hero_stat(self, hero: str | Heroes, *, error: bool) -&gt; HeroStat: ...\n\n    @typing.overload\n    def get_hero_stat(self, hero: str | Heroes) -&gt; HeroStat | None: ...\n\n    def get_hero_stat(\n        self, hero: str | Heroes, *, error: bool = False\n    ) -&gt; HeroStat | None:\n        \"\"\"\n        Get hero stats by name or ID.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve stats for.\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        dict[str, typing.Any] | None\n            The hero stats if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; stats = client.get_hero_stat(\"spider-man\")\n        &gt;&gt;&gt; if stats:\n        ...     print(stats)\n        \"\"\"\n        response = self.client.get(\n            Endpoints.HERO_STATS(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            print(response.json())\n            return HeroStat.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str, *, error: bool\n    ) -&gt; HeroLeaderboard: ...\n\n    @typing.overload\n    def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str\n    ) -&gt; HeroLeaderboard | None: ...\n\n    @typing.overload\n    def get_hero_leaderboard(\n        self, hero: str | Heroes, *, error: bool\n    ) -&gt; HeroLeaderboard: ...\n\n    @typing.overload\n    def get_hero_leaderboard(self, hero: str | Heroes) -&gt; HeroLeaderboard | None: ...\n\n    def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str = \"pc\", *, error: bool = False\n    ) -&gt; HeroLeaderboard | None:\n        \"\"\"\n        Get hero leaderboard by name or ID.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve stats for.\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        dict[HeroLeaderboard] | None\n            The hero stats if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; stats = client.get_hero_leaderboard(\"spider-man\")\n        &gt;&gt;&gt; if stats:\n        ...     print(stats)\n        \"\"\"\n        response = self.client.get(\n            Endpoints.HERO_LEADERBOARD(\n                hero.value if isinstance(hero, Heroes) else hero, platform\n            )\n        )\n        if response.status_code == 200:\n            return HeroLeaderboard.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_hero_costumes(\n        self, hero: str | Heroes, *, error: bool\n    ) -&gt; list[Costume]: ...\n\n    @typing.overload\n    def get_hero_costumes(self, hero: str | Heroes) -&gt; list[Costume] | None: ...\n\n    def get_hero_costumes(\n        self, hero: str | Heroes, *, error: bool = False\n    ) -&gt; list[Costume] | None:\n        \"\"\"\n        Get all costumes for a specific hero.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve costumes for.\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Costume] | None\n            A list of all costumes for the specified hero if successful,\n            None if the request fails and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; costumes = client.get_hero_costumes(\"spider-man\")\n        &gt;&gt;&gt; if costumes:\n        ...     for costume in costumes:\n        ...         print(costume.name)\n        \"\"\"\n        response = self.client.get(\n            Endpoints.ALL_COSTUMES(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            return [Costume.from_dict(costume) for costume in response.json()]\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_costume(\n        self, hero: str | Heroes, costume_id: str, *, error: bool\n    ) -&gt; Costume: ...\n\n    @typing.overload\n    def get_costume(self, hero: str | Heroes, costume_id: str) -&gt; Costume | None: ...\n\n    def get_costume(\n        self, hero: str | Heroes, costume_id: str, *, error: bool = False\n    ) -&gt; Costume | None:\n        \"\"\"\n        Get a specific costume for a hero.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve the costume for.\n        costume_id : str\n            The ID of the costume to retrieve.\n\n        Returns\n        -------\n        Costume | None\n            The costume if found, None if not found.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; costume = client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n        ... if costume:\n        ...     print(costume.name)\n        \"\"\"\n        response = self.client.get(\n            Endpoints.GET_COSTUME(\n                hero.value if isinstance(hero, Heroes) else hero, costume_id\n            )\n        )\n        if response.status_code == 200:\n            return CostumePremiumWrapper.from_dict(response.json())\n        return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_all_heroes","title":"<code>get_all_heroes(*, error=False)</code>","text":"<pre><code>get_all_heroes(*, error: bool) -&gt; list[Hero]\n</code></pre><pre><code>get_all_heroes() -&gt; list[Hero] | None\n</code></pre> <p>Get all available heroes.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Hero] | None</code> <p>A list of all heroes if successful, None if the request fails and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; heroes = client.get_all_heroes()\n&gt;&gt;&gt; if heroes:\n...     for hero in heroes:\n...         print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n    \"\"\"\n    Get all available heroes.\n\n    Parameters\n    ----------\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Hero] | None\n        A list of all heroes if successful, None if the request fails and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; heroes = client.get_all_heroes()\n    &gt;&gt;&gt; if heroes:\n    ...     for hero in heroes:\n    ...         print(hero.name)\n    \"\"\"\n    response = self.client.get(Endpoints.ALL_HEROES())\n    if response.status_code == 200:\n        return [Hero.from_dict(hero) for hero in response.json()]\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_costume","title":"<code>get_costume(hero, costume_id, *, error=False)</code>","text":"<pre><code>get_costume(\n    hero: str | Heroes, costume_id: str, *, error: bool\n) -&gt; Costume\n</code></pre><pre><code>get_costume(\n    hero: str | Heroes, costume_id: str\n) -&gt; Costume | None\n</code></pre> <p>Get a specific costume for a hero.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve the costume for.</p> required <code>costume_id</code> <code>str</code> <p>The ID of the costume to retrieve.</p> required <p>Returns:</p> Type Description <code>Costume | None</code> <p>The costume if found, None if not found.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; costume = client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n... if costume:\n...     print(costume.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_costume(\n    self, hero: str | Heroes, costume_id: str, *, error: bool = False\n) -&gt; Costume | None:\n    \"\"\"\n    Get a specific costume for a hero.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve the costume for.\n    costume_id : str\n        The ID of the costume to retrieve.\n\n    Returns\n    -------\n    Costume | None\n        The costume if found, None if not found.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; costume = client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n    ... if costume:\n    ...     print(costume.name)\n    \"\"\"\n    response = self.client.get(\n        Endpoints.GET_COSTUME(\n            hero.value if isinstance(hero, Heroes) else hero, costume_id\n        )\n    )\n    if response.status_code == 200:\n        return CostumePremiumWrapper.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_hero","title":"<code>get_hero(hero, *, error=False)</code>","text":"<pre><code>get_hero(hero: str | Heroes, *, error: bool) -&gt; Hero\n</code></pre><pre><code>get_hero(hero: str | Heroes) -&gt; Hero | None\n</code></pre> <p>Get a hero by name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve.</p> required <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Hero | None</code> <p>The hero if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n&gt;&gt;&gt; if hero:\n...     print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n    \"\"\"\n    Get a hero by name or ID.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve.\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    Hero | None\n        The hero if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n    &gt;&gt;&gt; if hero:\n    ...     print(hero.name)\n    \"\"\"\n    response = self.client.get(\n        Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        return Hero.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_hero_costumes","title":"<code>get_hero_costumes(hero, *, error=False)</code>","text":"<pre><code>get_hero_costumes(\n    hero: str | Heroes, *, error: bool\n) -&gt; list[Costume]\n</code></pre><pre><code>get_hero_costumes(\n    hero: str | Heroes,\n) -&gt; list[Costume] | None\n</code></pre> <p>Get all costumes for a specific hero.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve costumes for.</p> required <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Costume] | None</code> <p>A list of all costumes for the specified hero if successful, None if the request fails and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; costumes = client.get_hero_costumes(\"spider-man\")\n&gt;&gt;&gt; if costumes:\n...     for costume in costumes:\n...         print(costume.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_hero_costumes(\n    self, hero: str | Heroes, *, error: bool = False\n) -&gt; list[Costume] | None:\n    \"\"\"\n    Get all costumes for a specific hero.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve costumes for.\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Costume] | None\n        A list of all costumes for the specified hero if successful,\n        None if the request fails and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; costumes = client.get_hero_costumes(\"spider-man\")\n    &gt;&gt;&gt; if costumes:\n    ...     for costume in costumes:\n    ...         print(costume.name)\n    \"\"\"\n    response = self.client.get(\n        Endpoints.ALL_COSTUMES(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        return [Costume.from_dict(costume) for costume in response.json()]\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_hero_leaderboard","title":"<code>get_hero_leaderboard(hero, platform='pc', *, error=False)</code>","text":"<pre><code>get_hero_leaderboard(\n    hero: str | Heroes, platform: str, *, error: bool\n) -&gt; HeroLeaderboard\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes, platform: str\n) -&gt; HeroLeaderboard | None\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes, *, error: bool\n) -&gt; HeroLeaderboard\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes,\n) -&gt; HeroLeaderboard | None\n</code></pre> <p>Get hero leaderboard by name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve stats for.</p> required <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[HeroLeaderboard] | None</code> <p>The hero stats if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; stats = client.get_hero_leaderboard(\"spider-man\")\n&gt;&gt;&gt; if stats:\n...     print(stats)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_hero_leaderboard(\n    self, hero: str | Heroes, platform: str = \"pc\", *, error: bool = False\n) -&gt; HeroLeaderboard | None:\n    \"\"\"\n    Get hero leaderboard by name or ID.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve stats for.\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    dict[HeroLeaderboard] | None\n        The hero stats if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; stats = client.get_hero_leaderboard(\"spider-man\")\n    &gt;&gt;&gt; if stats:\n    ...     print(stats)\n    \"\"\"\n    response = self.client.get(\n        Endpoints.HERO_LEADERBOARD(\n            hero.value if isinstance(hero, Heroes) else hero, platform\n        )\n    )\n    if response.status_code == 200:\n        return HeroLeaderboard.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_hero_stat","title":"<code>get_hero_stat(hero, *, error=False)</code>","text":"<pre><code>get_hero_stat(\n    hero: str | Heroes, *, error: bool\n) -&gt; HeroStat\n</code></pre><pre><code>get_hero_stat(hero: str | Heroes) -&gt; HeroStat | None\n</code></pre> <p>Get hero stats by name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve stats for.</p> required <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>The hero stats if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; stats = client.get_hero_stat(\"spider-man\")\n&gt;&gt;&gt; if stats:\n...     print(stats)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_hero_stat(\n    self, hero: str | Heroes, *, error: bool = False\n) -&gt; HeroStat | None:\n    \"\"\"\n    Get hero stats by name or ID.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve stats for.\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    dict[str, typing.Any] | None\n        The hero stats if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; stats = client.get_hero_stat(\"spider-man\")\n    &gt;&gt;&gt; if stats:\n    ...     print(stats)\n    \"\"\"\n    response = self.client.get(\n        Endpoints.HERO_STATS(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        print(response.json())\n        return HeroStat.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient","title":"<code>AsyncMarvelRivalsClient</code>","text":"<p>Asynchronous client for interacting with the Marvel Rivals API.</p> <p>This client allows for fetching hero data from the Marvel Rivals API using asynchronous HTTP requests.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to authenticate requests to the Marvel Rivals API.</p> required <p>Attributes:</p> Name Type Description <code>client</code> <code>AsyncClient</code> <p>The HTTP client used for making asynchronous requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from marvelrivalsapi import AsyncMarvelRivalsClient\n&gt;&gt;&gt;\n&gt;&gt;&gt; async def main():\n...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n...     hero = await client.get_hero(\"spider-man\")\n...     print(hero.name)\n...     await client.close()\n&gt;&gt;&gt;\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>@define\nclass AsyncMarvelRivalsClient:\n    \"\"\"\n    Asynchronous client for interacting with the Marvel Rivals API.\n\n    This client allows for fetching hero data from the Marvel Rivals API\n    using asynchronous HTTP requests.\n\n    Parameters\n    ----------\n    api_key : str\n        The API key to authenticate requests to the Marvel Rivals API.\n\n    Attributes\n    ----------\n    client : httpx.AsyncClient\n        The HTTP client used for making asynchronous requests.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; from marvelrivalsapi import AsyncMarvelRivalsClient\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; async def main():\n    ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n    ...     hero = await client.get_hero(\"spider-man\")\n    ...     print(hero.name)\n    ...     await client.close()\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\n\n    api_key: str\n    client: httpx.AsyncClient = field(init=False)\n\n    def __attrs_post_init__(self) -&gt; None:\n        self.client = httpx.AsyncClient(headers={\"x-api-key\": self.api_key})\n\n    def throw(self, res: httpx.Response) -&gt; None:\n        raise MarvelRivalsAPIError(res)\n\n    @typing.overload\n    async def get_hero(self, hero: str | Heroes, *, error: bool) -&gt; Hero: ...\n\n    @typing.overload\n    async def get_hero(self, hero: str | Heroes) -&gt; Hero | None: ...\n\n    async def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n        \"\"\"\n        Get a hero by name or ID asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        Hero | None\n            The hero if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     hero = await client.get_hero(\"spider-man\")\n        ...     if hero:\n        ...         print(hero.name)\n        \"\"\"\n        response = await self.client.get(\n            Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            return Hero.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_all_heroes(self, *, error: bool) -&gt; list[Hero]: ...\n\n    @typing.overload\n    async def get_all_heroes(self) -&gt; list[Hero] | None: ...\n\n    async def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n        \"\"\"\n        Get all available heroes asynchronously.\n\n        Parameters\n        ----------\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Hero] | None\n            A list of all heroes if successful, None if the request fails and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     heroes = await client.get_all_heroes()\n        ...     if heroes:\n        ...         for hero in heroes:\n        ...             print(hero.name)\n        \"\"\"\n        response = await self.client.get(Endpoints.ALL_HEROES())\n        if response.status_code == 200:\n            return [Hero.from_dict(hero) for hero in response.json()]\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_hero_stats(self, hero: str | Heroes, *, error: bool) -&gt; HeroStat: ...\n\n    @typing.overload\n    async def get_hero_stats(self, hero: str | Heroes) -&gt; HeroStat | None: ...\n\n    async def get_hero_stats(\n        self, hero: str | Heroes, *, error: bool = False\n    ) -&gt; HeroStat | None:\n        \"\"\"\n        Get statistics for a specific hero asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve stats for.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        HeroStat | None\n            The hero statistics if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     stats = await client.get_hero_stats(\"Spider-Man\")\n        ...     if stats:\n        ...         print(f\"Win rate: {stats.win_rate:.2%}\")\n        \"\"\"\n        response = await self.client.get(\n            Endpoints.HERO_STATS(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            return HeroStat.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str, *, error: bool\n    ) -&gt; HeroLeaderboard: ...\n\n    @typing.overload\n    async def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str\n    ) -&gt; HeroLeaderboard | None: ...\n\n    @typing.overload\n    async def get_hero_leaderboard(\n        self, hero: str | Heroes, *, error: bool\n    ) -&gt; HeroLeaderboard: ...\n\n    @typing.overload\n    async def get_hero_leaderboard(\n        self, hero: str | Heroes\n    ) -&gt; HeroLeaderboard | None: ...\n\n    async def get_hero_leaderboard(\n        self, hero: str | Heroes, platform: str = \"pc\", *, error: bool = False\n    ) -&gt; HeroLeaderboard | None:\n        \"\"\"\n        Get the leaderboard for a specific hero and platform asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve the leaderboard for.\n        platform : str\n            The platform to filter the leaderboard by.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        HeroLeaderboard | None\n            The leaderboard data if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     leaderboard = await client.get_hero_leaderboard(\"spider-man\")\n        ...     if leaderboard:\n        ...         for entry in leaderboard.entries:\n        ...             print(f\"{entry.name}: {entry.score}\")\n        \"\"\"\n        response = await self.client.get(\n            Endpoints.HERO_LEADERBOARD(\n                hero.value if isinstance(hero, Heroes) else hero, platform\n            )\n        )\n        if response.status_code == 200:\n            return HeroLeaderboard.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_hero_costumes(\n        self, hero: str | Heroes, *, error: bool\n    ) -&gt; list[Costume]: ...\n\n    @typing.overload\n    async def get_hero_costumes(self, hero: str | Heroes) -&gt; list[Costume] | None: ...\n\n    async def get_hero_costumes(\n        self, hero: str | Heroes, *, error: bool = False\n    ) -&gt; list[Costume] | None:\n        \"\"\"\n        Get all costumes for a specific hero asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve costumes for.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Costume] | None\n            A list of costumes if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     costumes = await client.get_hero_costumes(\"spider-man\")\n        ...     if costumes:\n        ...         for costume in costumes:\n        ...             print(costume.name)\n        \"\"\"\n        response = await self.client.get(\n            Endpoints.ALL_COSTUMES(hero.value if isinstance(hero, Heroes) else hero)\n        )\n        if response.status_code == 200:\n            return [Costume.from_dict(costume) for costume in response.json()]\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_costume(\n        self, hero: str | Heroes, costume_id: str, *, error: bool\n    ) -&gt; Costume: ...\n\n    @typing.overload\n    async def get_costume(\n        self, hero: str | Heroes, costume_id: str\n    ) -&gt; Costume | None: ...\n\n    async def get_costume(\n        self, hero: str | Heroes, costume_id: str, *, error: bool = False\n    ) -&gt; Costume | None:\n        \"\"\"\n        Get a specific costume for a hero asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve the costume for.\n        costume_id : str\n            The ID of the costume to retrieve.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        Costume | None\n            The costume if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     costume = await client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n        ...     if costume:\n        ...         print(costume.name)\n        \"\"\"\n        response = await self.client.get(\n            Endpoints.GET_COSTUME(\n                hero.value if isinstance(hero, Heroes) else hero, costume_id\n            )\n        )\n        if response.status_code == 200:\n            return CostumePremiumWrapper.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        Close the HTTP client session.\n\n        This method should be called when the client is no longer needed to\n        properly clean up resources.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async def main():\n        ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n        ...     # Use the client...\n        ...     await client.close()\n        \"\"\"\n        await self.client.aclose()\n\n    async def __aenter__(self) -&gt; AsyncMarvelRivalsClient:\n        return self\n\n    async def __aexit__(self, *args: typing.Any) -&gt; None:\n        await self.close()\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the HTTP client session.</p> <p>This method should be called when the client is no longer needed to properly clean up resources.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async def main():\n...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n...     # Use the client...\n...     await client.close()\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the HTTP client session.\n\n    This method should be called when the client is no longer needed to\n    properly clean up resources.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async def main():\n    ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n    ...     # Use the client...\n    ...     await client.close()\n    \"\"\"\n    await self.client.aclose()\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_all_heroes","title":"<code>get_all_heroes(*, error=False)</code>  <code>async</code>","text":"<pre><code>get_all_heroes(*, error: bool) -&gt; list[Hero]\n</code></pre><pre><code>get_all_heroes() -&gt; list[Hero] | None\n</code></pre> <p>Get all available heroes asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Hero] | None</code> <p>A list of all heroes if successful, None if the request fails and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     heroes = await client.get_all_heroes()\n...     if heroes:\n...         for hero in heroes:\n...             print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n    \"\"\"\n    Get all available heroes asynchronously.\n\n    Parameters\n    ----------\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Hero] | None\n        A list of all heroes if successful, None if the request fails and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     heroes = await client.get_all_heroes()\n    ...     if heroes:\n    ...         for hero in heroes:\n    ...             print(hero.name)\n    \"\"\"\n    response = await self.client.get(Endpoints.ALL_HEROES())\n    if response.status_code == 200:\n        return [Hero.from_dict(hero) for hero in response.json()]\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_costume","title":"<code>get_costume(hero, costume_id, *, error=False)</code>  <code>async</code>","text":"<pre><code>get_costume(\n    hero: str | Heroes, costume_id: str, *, error: bool\n) -&gt; Costume\n</code></pre><pre><code>get_costume(\n    hero: str | Heroes, costume_id: str\n) -&gt; Costume | None\n</code></pre> <p>Get a specific costume for a hero asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve the costume for.</p> required <code>costume_id</code> <code>str</code> <p>The ID of the costume to retrieve.</p> required <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Costume | None</code> <p>The costume if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     costume = await client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n...     if costume:\n...         print(costume.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_costume(\n    self, hero: str | Heroes, costume_id: str, *, error: bool = False\n) -&gt; Costume | None:\n    \"\"\"\n    Get a specific costume for a hero asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve the costume for.\n    costume_id : str\n        The ID of the costume to retrieve.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    Costume | None\n        The costume if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     costume = await client.get_costume(\"squirrel girl\", \"Cheerful Dragoness\")\n    ...     if costume:\n    ...         print(costume.name)\n    \"\"\"\n    response = await self.client.get(\n        Endpoints.GET_COSTUME(\n            hero.value if isinstance(hero, Heroes) else hero, costume_id\n        )\n    )\n    if response.status_code == 200:\n        return CostumePremiumWrapper.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_hero","title":"<code>get_hero(hero, *, error=False)</code>  <code>async</code>","text":"<pre><code>get_hero(hero: str | Heroes, *, error: bool) -&gt; Hero\n</code></pre><pre><code>get_hero(hero: str | Heroes) -&gt; Hero | None\n</code></pre> <p>Get a hero by name or ID asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve.</p> required <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Hero | None</code> <p>The hero if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     hero = await client.get_hero(\"spider-man\")\n...     if hero:\n...         print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n    \"\"\"\n    Get a hero by name or ID asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    Hero | None\n        The hero if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     hero = await client.get_hero(\"spider-man\")\n    ...     if hero:\n    ...         print(hero.name)\n    \"\"\"\n    response = await self.client.get(\n        Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        return Hero.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_hero_costumes","title":"<code>get_hero_costumes(hero, *, error=False)</code>  <code>async</code>","text":"<pre><code>get_hero_costumes(\n    hero: str | Heroes, *, error: bool\n) -&gt; list[Costume]\n</code></pre><pre><code>get_hero_costumes(\n    hero: str | Heroes,\n) -&gt; list[Costume] | None\n</code></pre> <p>Get all costumes for a specific hero asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve costumes for.</p> required <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Costume] | None</code> <p>A list of costumes if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     costumes = await client.get_hero_costumes(\"spider-man\")\n...     if costumes:\n...         for costume in costumes:\n...             print(costume.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_hero_costumes(\n    self, hero: str | Heroes, *, error: bool = False\n) -&gt; list[Costume] | None:\n    \"\"\"\n    Get all costumes for a specific hero asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve costumes for.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Costume] | None\n        A list of costumes if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     costumes = await client.get_hero_costumes(\"spider-man\")\n    ...     if costumes:\n    ...         for costume in costumes:\n    ...             print(costume.name)\n    \"\"\"\n    response = await self.client.get(\n        Endpoints.ALL_COSTUMES(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        return [Costume.from_dict(costume) for costume in response.json()]\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_hero_leaderboard","title":"<code>get_hero_leaderboard(hero, platform='pc', *, error=False)</code>  <code>async</code>","text":"<pre><code>get_hero_leaderboard(\n    hero: str | Heroes, platform: str, *, error: bool\n) -&gt; HeroLeaderboard\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes, platform: str\n) -&gt; HeroLeaderboard | None\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes, *, error: bool\n) -&gt; HeroLeaderboard\n</code></pre><pre><code>get_hero_leaderboard(\n    hero: str | Heroes,\n) -&gt; HeroLeaderboard | None\n</code></pre> <p>Get the leaderboard for a specific hero and platform asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve the leaderboard for.</p> required <code>platform</code> <code>str</code> <p>The platform to filter the leaderboard by.</p> <code>'pc'</code> <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>HeroLeaderboard | None</code> <p>The leaderboard data if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     leaderboard = await client.get_hero_leaderboard(\"spider-man\")\n...     if leaderboard:\n...         for entry in leaderboard.entries:\n...             print(f\"{entry.name}: {entry.score}\")\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_hero_leaderboard(\n    self, hero: str | Heroes, platform: str = \"pc\", *, error: bool = False\n) -&gt; HeroLeaderboard | None:\n    \"\"\"\n    Get the leaderboard for a specific hero and platform asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve the leaderboard for.\n    platform : str\n        The platform to filter the leaderboard by.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    HeroLeaderboard | None\n        The leaderboard data if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     leaderboard = await client.get_hero_leaderboard(\"spider-man\")\n    ...     if leaderboard:\n    ...         for entry in leaderboard.entries:\n    ...             print(f\"{entry.name}: {entry.score}\")\n    \"\"\"\n    response = await self.client.get(\n        Endpoints.HERO_LEADERBOARD(\n            hero.value if isinstance(hero, Heroes) else hero, platform\n        )\n    )\n    if response.status_code == 200:\n        return HeroLeaderboard.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_hero_stats","title":"<code>get_hero_stats(hero, *, error=False)</code>  <code>async</code>","text":"<pre><code>get_hero_stats(\n    hero: str | Heroes, *, error: bool\n) -&gt; HeroStat\n</code></pre><pre><code>get_hero_stats(hero: str | Heroes) -&gt; HeroStat | None\n</code></pre> <p>Get statistics for a specific hero asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve stats for.</p> required <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>HeroStat | None</code> <p>The hero statistics if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     stats = await client.get_hero_stats(\"Spider-Man\")\n...     if stats:\n...         print(f\"Win rate: {stats.win_rate:.2%}\")\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_hero_stats(\n    self, hero: str | Heroes, *, error: bool = False\n) -&gt; HeroStat | None:\n    \"\"\"\n    Get statistics for a specific hero asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve stats for.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    HeroStat | None\n        The hero statistics if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     stats = await client.get_hero_stats(\"Spider-Man\")\n    ...     if stats:\n    ...         print(f\"Win rate: {stats.win_rate:.2%}\")\n    \"\"\"\n    response = await self.client.get(\n        Endpoints.HERO_STATS(hero.value if isinstance(hero, Heroes) else hero)\n    )\n    if response.status_code == 200:\n        return HeroStat.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/heroes/","title":"Heroes","text":"<p>Classes related to hero data in the API.</p> <p>               Bases: <code>Model</code></p> <p>Represents a hero character in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique hero identifier.</p> <code>name</code> <code>str</code> <p>Hero's display name.</p> <code>real_name</code> <code>str</code> <p>The hero's real-world identity.</p> <code>imageUrl</code> <code>str</code> <p>URL or path to the hero's image.</p> <code>role</code> <code>str</code> <p>The hero's role (e.g., Vanguard, Support).</p> <code>attack_type</code> <code>str</code> <p>Hero's attack type (e.g., Melee Heroes).</p> <code>team</code> <code>list[str]</code> <p>Factions or affiliations the hero belongs to (e.g., Avengers).</p> <code>difficulty</code> <code>str</code> <p>Difficulty rating of the hero (e.g., \"4\").</p> <code>bio</code> <code>str</code> <p>Short biography of the hero.</p> <code>lore</code> <code>str</code> <p>Extended lore/backstory of the hero.</p> <code>transformations</code> <code>list[Transformation]</code> <p>Different forms the hero can transform into.</p> <code>costumes</code> <code>list[Costume]</code> <p>List of hero costumes/skins.</p> <code>abilities</code> <code>list[Ability]</code> <p>List of the hero's abilities.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Hero(Model):\n    \"\"\"\n    Represents a hero character in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique hero identifier.\n    name : str\n        Hero's display name.\n    real_name : str\n        The hero's real-world identity.\n    imageUrl : str\n        URL or path to the hero's image.\n    role : str\n        The hero's role (e.g., Vanguard, Support).\n    attack_type : str\n        Hero's attack type (e.g., Melee Heroes).\n    team : list[str]\n        Factions or affiliations the hero belongs to (e.g., Avengers).\n    difficulty : str\n        Difficulty rating of the hero (e.g., \"4\").\n    bio : str\n        Short biography of the hero.\n    lore : str\n        Extended lore/backstory of the hero.\n    transformations : list[Transformation]\n        Different forms the hero can transform into.\n    costumes : list[Costume]\n        List of hero costumes/skins.\n    abilities : list[Ability]\n        List of the hero's abilities.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    id: str\n    name: str\n    real_name: str\n    imageUrl: str\n    role: str\n    attack_type: str\n    team: list[str] = field(factory=list)\n    difficulty: str\n    bio: str\n    lore: str\n    transformations: list[Transformation] = field(factory=list)\n    costumes: list[Costume] = field(factory=list)\n    abilities: list[Ability] = field(factory=list)\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Hero:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            real_name=data[\"real_name\"],\n            imageUrl=data[\"imageUrl\"],\n            role=data[\"role\"],\n            attack_type=data[\"attack_type\"],\n            team=data.get(\"team\", []),\n            difficulty=data[\"difficulty\"],\n            bio=data[\"bio\"],\n            lore=data[\"lore\"],\n            transformations=[\n                Transformation.from_dict(t) for t in data.get(\"transformations\", [])\n            ],\n            costumes=[Costume.from_dict(c) for c in data.get(\"costumes\", [])],\n            abilities=[Ability.from_dict(a) for a in data.get(\"abilities\", [])],\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents a hero ability in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique ability identifier.</p> <code>icon</code> <code>str | None</code> <p>Icon path for the ability.</p> <code>name</code> <code>str | None</code> <p>Name of the ability.</p> <code>type</code> <code>str</code> <p>Type of the ability (e.g., Ultimate, Passive).</p> <code>isCollab</code> <code>bool</code> <p>Whether the ability is from a collaboration.</p> <code>description</code> <code>str | None</code> <p>Description of what the ability does.</p> <code>transformation_id</code> <code>str</code> <p>ID of the transformation this ability is tied to.</p> <code>additional_fields</code> <code>dict</code> <p>Dynamic key-value object with extra metadata. Keys vary per ability and may include: Key, Casting, Cooldown, Energy Cost, Special Effect, etc.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Ability(Model):\n    \"\"\"\n    Represents a hero ability in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : int\n        Unique ability identifier.\n    icon : str | None\n        Icon path for the ability.\n    name : str | None\n        Name of the ability.\n    type : str\n        Type of the ability (e.g., Ultimate, Passive).\n    isCollab : bool\n        Whether the ability is from a collaboration.\n    description : str | None\n        Description of what the ability does.\n    transformation_id : str\n        ID of the transformation this ability is tied to.\n    additional_fields : dict\n        Dynamic key-value object with extra metadata. Keys vary per ability\n        and may include: Key, Casting, Cooldown, Energy Cost, Special Effect, etc.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    id: int\n    icon: str | None\n    name: str | None\n    type: str\n    isCollab: bool\n    description: str | None\n    transformation_id: str\n    additional_fields: dict[str, object] = field(factory=dict)\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Ability:\n        return cls(\n            id=data[\"id\"],\n            icon=data.get(\"icon\"),\n            name=data.get(\"name\"),\n            type=data[\"type\"],\n            isCollab=data[\"isCollab\"],\n            description=data.get(\"description\"),\n            transformation_id=data[\"transformation_id\"],\n            additional_fields=data.get(\"additional_fields\", {}),\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents a hero transformation in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the transformation.</p> <code>name</code> <code>str</code> <p>Name of the transformation (e.g., Bruce Banner).</p> <code>icon</code> <code>str</code> <p>Image path for the transformation.</p> <code>health</code> <code>str | None</code> <p>Health for the transformation, if available.</p> <code>movement_speed</code> <code>str | None</code> <p>Movement speed in meters per second (e.g., \"6m/s\").</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Transformation(Model):\n    \"\"\"\n    Represents a hero transformation in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique identifier for the transformation.\n    name : str\n        Name of the transformation (e.g., Bruce Banner).\n    icon : str\n        Image path for the transformation.\n    health : str | None\n        Health for the transformation, if available.\n    movement_speed : str | None\n        Movement speed in meters per second (e.g., \"6m/s\").\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    id: str\n    name: str\n    icon: str\n    health: str | None = None\n    movement_speed: str | None = None\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Transformation:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            icon=data[\"icon\"],\n            health=data.get(\"health\"),\n            movement_speed=data.get(\"movement_speed\"),\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents a hero costume/skin in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the costume.</p> <code>name</code> <code>str</code> <p>Name of the costume.</p> <code>icon</code> <code>str</code> <p>Icon path for the costume.</p> <code>quality</code> <code>str</code> <p>Quality level (e.g., NO_QUALITY).</p> <code>description</code> <code>str</code> <p>Description of the costume.</p> <code>appearance</code> <code>str</code> <p>Visual details about the costume appearance.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Costume(Model):\n    \"\"\"\n    Represents a hero costume/skin in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique identifier for the costume.\n    name : str\n        Name of the costume.\n    icon : str\n        Icon path for the costume.\n    quality : str\n        Quality level (e.g., NO_QUALITY).\n    description : str\n        Description of the costume.\n    appearance : str\n        Visual details about the costume appearance.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    id: str\n    name: str\n    icon: str\n    quality: str\n    description: str\n    appearance: str\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Costume:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            icon=data[\"icon\"],\n            quality=data.get(\"quality\", \"NO_QUALITY\"),\n            description=data[\"description\"],\n            appearance=data[\"appearance\"],\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents statistics for a hero in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>hero_id</code> <code>int</code> <p>Unique identifier for the hero.</p> <code>hero_name</code> <code>str</code> <p>Display name of the hero.</p> <code>hero_icon</code> <code>str</code> <p>Path or URL to the hero's icon image.</p> <code>matches</code> <code>int</code> <p>Total number of matches the hero has been played in.</p> <code>wins</code> <code>int</code> <p>Total number of matches won with this hero.</p> <code>k</code> <code>float</code> <p>Average kills per match.</p> <code>d</code> <code>float</code> <p>Average deaths per match.</p> <code>a</code> <code>float</code> <p>Average assists per match.</p> <code>play_time</code> <code>str</code> <p>Total play time with this hero (formatted as hours, minutes, and seconds).</p> <code>total_hero_damage</code> <code>int</code> <p>Total damage dealt to enemy heroes.</p> <code>total_hero_heal</code> <code>int</code> <p>Total healing done by this hero.</p> <code>total_damage_taken</code> <code>int</code> <p>Total damage taken while playing this hero.</p> <code>session_hit_rate</code> <code>float</code> <p>Hit rate during sessions, usually a value between 0 and 1.</p> <code>solo_kill</code> <code>float</code> <p>Average number of solo kills per match.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass HeroStat(Model):\n    \"\"\"\n    Represents statistics for a hero in Marvel Rivals.\n\n    Attributes\n    ----------\n    hero_id : int\n        Unique identifier for the hero.\n    hero_name : str\n        Display name of the hero.\n    hero_icon : str\n        Path or URL to the hero's icon image.\n    matches : int\n        Total number of matches the hero has been played in.\n    wins : int\n        Total number of matches won with this hero.\n    k : float\n        Average kills per match.\n    d : float\n        Average deaths per match.\n    a : float\n        Average assists per match.\n    play_time : str\n        Total play time with this hero (formatted as hours, minutes, and seconds).\n    total_hero_damage : int\n        Total damage dealt to enemy heroes.\n    total_hero_heal : int\n        Total healing done by this hero.\n    total_damage_taken : int\n        Total damage taken while playing this hero.\n    session_hit_rate : float\n        Hit rate during sessions, usually a value between 0 and 1.\n    solo_kill : float\n        Average number of solo kills per match.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    hero_id: int\n    hero_name: str\n    hero_icon: str\n    matches: int\n    wins: int\n    k: float\n    d: float\n    a: float\n    play_time: str\n    total_hero_damage: int\n    total_hero_heal: int\n    total_damage_taken: int\n    session_hit_rate: float\n    solo_kill: float\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; HeroStat:\n        \"\"\"\n        Create a HeroStat instance from a dictionary.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing hero statistics data.\n\n        Returns\n        -------\n        HeroStat\n            A new HeroStat instance.\n        \"\"\"\n        return cls(\n            hero_id=data[\"hero_id\"],\n            hero_name=data[\"hero_name\"],\n            hero_icon=data[\"hero_icon\"],\n            matches=data[\"matches\"],\n            wins=data[\"wins\"],\n            k=data[\"k\"],\n            d=data[\"d\"],\n            a=data[\"a\"],\n            play_time=data[\"play_time\"],\n            total_hero_damage=data[\"total_hero_damage\"],\n            total_hero_heal=data[\"total_hero_heal\"],\n            total_damage_taken=data[\"total_damage_taken\"],\n            session_hit_rate=data[\"session_hit_rate\"],\n            solo_kill=data[\"solo_kill\"],\n            raw_dict=data.copy(),\n        )\n\n    @property\n    def win_rate(self) -&gt; float:\n        \"\"\"\n        Calculate win rate for this hero.\n\n        Returns\n        -------\n        float\n            Win rate as a decimal between 0 and 1.\n        \"\"\"\n        return self.wins / self.matches if self.matches &gt; 0 else 0.0\n\n    @property\n    def kda(self) -&gt; float:\n        \"\"\"\n        Calculate KDA (Kills + Assists / Deaths) ratio.\n\n        Returns\n        -------\n        float\n            KDA ratio. Returns (K+A) if deaths is 0.\n        \"\"\"\n        return (self.k + self.a) / (self.d or 1)\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents ranking information for a player in the current season.</p> <p>Attributes:</p> Name Type Description <code>rank_game_id</code> <code>int</code> <p>ID of the ranked game mode.</p> <code>level</code> <code>int</code> <p>Current rank level.</p> <code>rank_score</code> <code>str</code> <p>Current rank score.</p> <code>max_level</code> <code>int</code> <p>Highest rank level achieved during the season.</p> <code>max_rank_score</code> <code>str</code> <p>Highest rank score achieved during the season.</p> <code>update_time</code> <code>int</code> <p>Last update timestamp (Unix time).</p> <code>win_count</code> <code>int</code> <p>Number of ranked wins.</p> <code>protect_score</code> <code>int</code> <p>Score protected due to rank protection mechanics.</p> <code>diff_score</code> <code>str</code> <p>Score change since the last update.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass RankSeason(Model):\n    \"\"\"\n    Represents ranking information for a player in the current season.\n\n    Attributes\n    ----------\n    rank_game_id : int\n        ID of the ranked game mode.\n    level : int\n        Current rank level.\n    rank_score : str\n        Current rank score.\n    max_level : int\n        Highest rank level achieved during the season.\n    max_rank_score : str\n        Highest rank score achieved during the season.\n    update_time : int\n        Last update timestamp (Unix time).\n    win_count : int\n        Number of ranked wins.\n    protect_score : int\n        Score protected due to rank protection mechanics.\n    diff_score : str\n        Score change since the last update.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    rank_game_id: int\n    level: int\n    rank_score: str\n    max_level: int\n    max_rank_score: str\n    update_time: int\n    win_count: int\n    protect_score: int\n    diff_score: str\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; RankSeason:\n        \"\"\"\n        Create a RankSeason instance from a dictionary.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing rank season data.\n\n        Returns\n        -------\n        RankSeason\n            A new RankSeason instance.\n        \"\"\"\n        if not data:\n            return cls(\n                rank_game_id=0,\n                level=0,\n                rank_score=\"0\",\n                max_level=0,\n                max_rank_score=\"0\",\n                update_time=0,\n                win_count=0,\n                protect_score=0,\n                diff_score=\"0\",\n                raw_dict=data.copy(),\n            )\n\n        return cls(\n            rank_game_id=data[\"rank_game_id\"],\n            level=data[\"level\"],\n            rank_score=data[\"rank_score\"],\n            max_level=data[\"max_level\"],\n            max_rank_score=data[\"max_rank_score\"],\n            update_time=data[\"update_time\"],\n            win_count=data[\"win_count\"],\n            protect_score=data[\"protect_score\"],\n            diff_score=data[\"diff_score\"],\n            raw_dict=data.copy(),\n        )\n\n    @property\n    def last_updated(self) -&gt; datetime:\n        \"\"\"\n        Get the last update time as a datetime object.\n\n        Returns\n        -------\n        datetime\n            The last time the rank was updated.\n        \"\"\"\n        return datetime.fromtimestamp(self.update_time)\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents a leaderboard with multiple players.</p> <p>Attributes:</p> Name Type Description <code>players</code> <code>list[LeaderboardPlayer]</code> <p>List of players on the leaderboard.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass HeroLeaderboard(Model):\n    \"\"\"\n    Represents a leaderboard with multiple players.\n\n    Attributes\n    ----------\n    players : list[LeaderboardPlayer]\n        List of players on the leaderboard.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    players: list[LeaderboardPlayer] = field(factory=list)\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; HeroLeaderboard:\n        \"\"\"\n        Create a Leaderboard instance from a dictionary.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing leaderboard data.\n\n        Returns\n        -------\n        Leaderboard\n            A new Leaderboard instance.\n        \"\"\"\n        return cls(\n            players=[\n                LeaderboardPlayer.from_dict(player)\n                for player in data.get(\"players\", [])\n            ],\n            raw_dict=data.copy(),\n        )\n\n    def top_players(self, limit: int = 10) -&gt; list[LeaderboardPlayer]:\n        \"\"\"\n        Get the top players from the leaderboard.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Number of top players to return, by default 10\n\n        Returns\n        -------\n        list[LeaderboardPlayer]\n            List of top players, limited by the specified number.\n        \"\"\"\n        return self.players[:limit]\n\n    def sort_by_wins(self) -&gt; list[LeaderboardPlayer]:\n        \"\"\"\n        Sort players by number of wins (descending).\n\n        Returns\n        -------\n        list[LeaderboardPlayer]\n            List of players sorted by wins.\n        \"\"\"\n        return sorted(self.players, key=lambda p: p.wins, reverse=True)\n\n    def sort_by_kda(self) -&gt; list[LeaderboardPlayer]:\n        \"\"\"\n        Sort players by KDA ratio (descending).\n\n        Returns\n        -------\n        list[LeaderboardPlayer]\n            List of players sorted by KDA.\n        \"\"\"\n        return sorted(self.players, key=lambda p: p.kda, reverse=True)\n\n    def sort_by_rank(self) -&gt; list[LeaderboardPlayer]:\n        \"\"\"\n        Sort players by rank level (descending).\n\n        Returns\n        -------\n        list[LeaderboardPlayer]\n            List of players sorted by rank level.\n        \"\"\"\n        return sorted(\n            self.players, key=lambda p: p.info.rank_season.level, reverse=True\n        )\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroStat.kda","title":"<code>kda</code>  <code>property</code>","text":"<p>Calculate KDA (Kills + Assists / Deaths) ratio.</p> <p>Returns:</p> Type Description <code>float</code> <p>KDA ratio. Returns (K+A) if deaths is 0.</p>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroStat.win_rate","title":"<code>win_rate</code>  <code>property</code>","text":"<p>Calculate win rate for this hero.</p> <p>Returns:</p> Type Description <code>float</code> <p>Win rate as a decimal between 0 and 1.</p>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroStat.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a HeroStat instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing hero statistics data.</p> required <p>Returns:</p> Type Description <code>HeroStat</code> <p>A new HeroStat instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, typing.Any]) -&gt; HeroStat:\n    \"\"\"\n    Create a HeroStat instance from a dictionary.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing hero statistics data.\n\n    Returns\n    -------\n    HeroStat\n        A new HeroStat instance.\n    \"\"\"\n    return cls(\n        hero_id=data[\"hero_id\"],\n        hero_name=data[\"hero_name\"],\n        hero_icon=data[\"hero_icon\"],\n        matches=data[\"matches\"],\n        wins=data[\"wins\"],\n        k=data[\"k\"],\n        d=data[\"d\"],\n        a=data[\"a\"],\n        play_time=data[\"play_time\"],\n        total_hero_damage=data[\"total_hero_damage\"],\n        total_hero_heal=data[\"total_hero_heal\"],\n        total_damage_taken=data[\"total_damage_taken\"],\n        session_hit_rate=data[\"session_hit_rate\"],\n        solo_kill=data[\"solo_kill\"],\n        raw_dict=data.copy(),\n    )\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.RankSeason.last_updated","title":"<code>last_updated</code>  <code>property</code>","text":"<p>Get the last update time as a datetime object.</p> <p>Returns:</p> Type Description <code>datetime</code> <p>The last time the rank was updated.</p>"},{"location":"api/heroes/#marvelrivalsapi.models.RankSeason.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a RankSeason instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing rank season data.</p> required <p>Returns:</p> Type Description <code>RankSeason</code> <p>A new RankSeason instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, typing.Any]) -&gt; RankSeason:\n    \"\"\"\n    Create a RankSeason instance from a dictionary.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing rank season data.\n\n    Returns\n    -------\n    RankSeason\n        A new RankSeason instance.\n    \"\"\"\n    if not data:\n        return cls(\n            rank_game_id=0,\n            level=0,\n            rank_score=\"0\",\n            max_level=0,\n            max_rank_score=\"0\",\n            update_time=0,\n            win_count=0,\n            protect_score=0,\n            diff_score=\"0\",\n            raw_dict=data.copy(),\n        )\n\n    return cls(\n        rank_game_id=data[\"rank_game_id\"],\n        level=data[\"level\"],\n        rank_score=data[\"rank_score\"],\n        max_level=data[\"max_level\"],\n        max_rank_score=data[\"max_rank_score\"],\n        update_time=data[\"update_time\"],\n        win_count=data[\"win_count\"],\n        protect_score=data[\"protect_score\"],\n        diff_score=data[\"diff_score\"],\n        raw_dict=data.copy(),\n    )\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroLeaderboard.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a Leaderboard instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing leaderboard data.</p> required <p>Returns:</p> Type Description <code>Leaderboard</code> <p>A new Leaderboard instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, typing.Any]) -&gt; HeroLeaderboard:\n    \"\"\"\n    Create a Leaderboard instance from a dictionary.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing leaderboard data.\n\n    Returns\n    -------\n    Leaderboard\n        A new Leaderboard instance.\n    \"\"\"\n    return cls(\n        players=[\n            LeaderboardPlayer.from_dict(player)\n            for player in data.get(\"players\", [])\n        ],\n        raw_dict=data.copy(),\n    )\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroLeaderboard.sort_by_kda","title":"<code>sort_by_kda()</code>","text":"<p>Sort players by KDA ratio (descending).</p> <p>Returns:</p> Type Description <code>list[LeaderboardPlayer]</code> <p>List of players sorted by KDA.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>def sort_by_kda(self) -&gt; list[LeaderboardPlayer]:\n    \"\"\"\n    Sort players by KDA ratio (descending).\n\n    Returns\n    -------\n    list[LeaderboardPlayer]\n        List of players sorted by KDA.\n    \"\"\"\n    return sorted(self.players, key=lambda p: p.kda, reverse=True)\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroLeaderboard.sort_by_rank","title":"<code>sort_by_rank()</code>","text":"<p>Sort players by rank level (descending).</p> <p>Returns:</p> Type Description <code>list[LeaderboardPlayer]</code> <p>List of players sorted by rank level.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>def sort_by_rank(self) -&gt; list[LeaderboardPlayer]:\n    \"\"\"\n    Sort players by rank level (descending).\n\n    Returns\n    -------\n    list[LeaderboardPlayer]\n        List of players sorted by rank level.\n    \"\"\"\n    return sorted(\n        self.players, key=lambda p: p.info.rank_season.level, reverse=True\n    )\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroLeaderboard.sort_by_wins","title":"<code>sort_by_wins()</code>","text":"<p>Sort players by number of wins (descending).</p> <p>Returns:</p> Type Description <code>list[LeaderboardPlayer]</code> <p>List of players sorted by wins.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>def sort_by_wins(self) -&gt; list[LeaderboardPlayer]:\n    \"\"\"\n    Sort players by number of wins (descending).\n\n    Returns\n    -------\n    list[LeaderboardPlayer]\n        List of players sorted by wins.\n    \"\"\"\n    return sorted(self.players, key=lambda p: p.wins, reverse=True)\n</code></pre>"},{"location":"api/heroes/#marvelrivalsapi.models.HeroLeaderboard.top_players","title":"<code>top_players(limit=10)</code>","text":"<p>Get the top players from the leaderboard.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Number of top players to return, by default 10</p> <code>10</code> <p>Returns:</p> Type Description <code>list[LeaderboardPlayer]</code> <p>List of top players, limited by the specified number.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>def top_players(self, limit: int = 10) -&gt; list[LeaderboardPlayer]:\n    \"\"\"\n    Get the top players from the leaderboard.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Number of top players to return, by default 10\n\n    Returns\n    -------\n    list[LeaderboardPlayer]\n        List of top players, limited by the specified number.\n    \"\"\"\n    return self.players[:limit]\n</code></pre>"},{"location":"api/players/","title":"Players","text":"<p>Classes related to player data in the API.</p> <p>               Bases: <code>Model</code></p> <p>Represents basic information about a player.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Player's in-game name.</p> <code>cur_head_icon_id</code> <code>str</code> <p>ID of the current avatar or head icon.</p> <code>rank_season</code> <code>RankSeason</code> <p>Ranking information for the current season.</p> <code>login_os</code> <code>str</code> <p>Operating system used at last login (e.g., \"1\" = Android, \"2\" = iOS).</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass PlayerInfo(Model):\n    \"\"\"\n    Represents basic information about a player.\n\n    Attributes\n    ----------\n    name : str\n        Player's in-game name.\n    cur_head_icon_id : str\n        ID of the current avatar or head icon.\n    rank_season : RankSeason\n        Ranking information for the current season.\n    login_os : str\n        Operating system used at last login (e.g., \"1\" = Android, \"2\" = iOS).\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    name: str\n    cur_head_icon_id: str\n    rank_season: RankSeason\n    login_os: str\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; PlayerInfo:\n        \"\"\"\n        Create a PlayerInfo instance from a dictionary.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing player info data.\n\n        Returns\n        -------\n        PlayerInfo\n            A new PlayerInfo instance.\n        \"\"\"\n        return cls(\n            name=data[\"name\"],\n            cur_head_icon_id=data[\"cur_head_icon_id\"],\n            rank_season=RankSeason.from_dict(data[\"rank_season\"]),\n            login_os=data[\"login_os\"],\n            raw_dict=data.copy(),\n        )\n\n    @property\n    def platform(self) -&gt; LoginOS:\n        \"\"\"\n        Get the platform name based on the login OS code.\n\n        Returns\n        -------\n        str\n            The platform name (PC, PS or Xbox).\n        \"\"\"\n        platforms = {\n            \"1\": \"PC\",\n            \"2\": \"PS\",\n            \"3\": \"XBOX\",\n        }\n        return LoginOS(platforms.get(self.login_os, 1))\n</code></pre> <p>               Bases: <code>Model</code></p> <p>Represents a player entry in the leaderboard.</p> <p>Attributes:</p> Name Type Description <code>info</code> <code>PlayerInfo</code> <p>Basic information about the player.</p> <code>player_uid</code> <code>int</code> <p>Unique identifier for the player.</p> <code>matches</code> <code>int</code> <p>Total matches played.</p> <code>wins</code> <code>int</code> <p>Total matches won.</p> <code>kills</code> <code>int</code> <p>Total kills achieved.</p> <code>deaths</code> <code>int</code> <p>Total number of deaths.</p> <code>assists</code> <code>int</code> <p>Total number of assists.</p> <code>play_time</code> <code>str</code> <p>Total play time in minutes, as a string with decimal value.</p> <code>total_hero_damage</code> <code>str</code> <p>Total damage dealt to enemy heroes.</p> <code>total_damage_taken</code> <code>str</code> <p>Total damage taken from enemies.</p> <code>total_hero_heal</code> <code>str</code> <p>Total healing done to heroes.</p> <code>mvps</code> <code>int</code> <p>Number of times the player was MVP (Most Valuable Player).</p> <code>svps</code> <code>int</code> <p>Number of times the player was SVP (Second Valuable Player).</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass LeaderboardPlayer(Model):\n    \"\"\"\n    Represents a player entry in the leaderboard.\n\n    Attributes\n    ----------\n    info : PlayerInfo\n        Basic information about the player.\n    player_uid : int\n        Unique identifier for the player.\n    matches : int\n        Total matches played.\n    wins : int\n        Total matches won.\n    kills : int\n        Total kills achieved.\n    deaths : int\n        Total number of deaths.\n    assists : int\n        Total number of assists.\n    play_time : str\n        Total play time in minutes, as a string with decimal value.\n    total_hero_damage : str\n        Total damage dealt to enemy heroes.\n    total_damage_taken : str\n        Total damage taken from enemies.\n    total_hero_heal : str\n        Total healing done to heroes.\n    mvps : int\n        Number of times the player was MVP (Most Valuable Player).\n    svps : int\n        Number of times the player was SVP (Second Valuable Player).\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n\n    info: PlayerInfo\n    player_uid: int\n    matches: int\n    wins: int\n    kills: int\n    deaths: int\n    assists: int\n    play_time: str\n    total_hero_damage: str\n    total_damage_taken: str\n    total_hero_heal: str\n    mvps: int\n    svps: int\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; LeaderboardPlayer:\n        \"\"\"\n        Create a LeaderboardPlayer instance from a dictionary.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing leaderboard player data.\n\n        Returns\n        -------\n        LeaderboardPlayer\n            A new LeaderboardPlayer instance.\n        \"\"\"\n        return cls(\n            info=PlayerInfo.from_dict(data[\"info\"]),\n            player_uid=data[\"player_uid\"],\n            matches=data[\"matches\"],\n            wins=data[\"wins\"],\n            kills=data[\"kills\"],\n            deaths=data[\"deaths\"],\n            assists=data[\"assists\"],\n            play_time=data[\"play_time\"],\n            total_hero_damage=data[\"total_hero_damage\"],\n            total_damage_taken=data[\"total_damage_taken\"],\n            total_hero_heal=data[\"total_hero_heal\"],\n            mvps=data[\"mvps\"],\n            svps=data[\"svps\"],\n            raw_dict=data.copy(),\n        )\n\n    @property\n    def win_rate(self) -&gt; float:\n        \"\"\"\n        Calculate win rate for this player.\n\n        Returns\n        -------\n        float\n            Win rate as a decimal between 0 and 1.\n        \"\"\"\n        return self.wins / self.matches if self.matches &gt; 0 else 0.0\n\n    @property\n    def kda(self) -&gt; float:\n        \"\"\"\n        Calculate KDA (Kills + Assists / Deaths) ratio.\n\n        Returns\n        -------\n        float\n            KDA ratio. Uses deaths = 1 if deaths = 0.\n        \"\"\"\n        return (self.kills + self.assists) / (self.deaths or 1)\n\n    @property\n    def avg_kills(self) -&gt; float:\n        \"\"\"\n        Calculate average kills per match.\n\n        Returns\n        -------\n        float\n            Average kills per match.\n        \"\"\"\n        return self.kills / self.matches if self.matches &gt; 0 else 0.0\n\n    @property\n    def avg_deaths(self) -&gt; float:\n        \"\"\"\n        Calculate average deaths per match.\n\n        Returns\n        -------\n        float\n            Average deaths per match.\n        \"\"\"\n        return self.deaths / self.matches if self.matches &gt; 0 else 0.0\n\n    @property\n    def avg_assists(self) -&gt; float:\n        \"\"\"\n        Calculate average assists per match.\n\n        Returns\n        -------\n        float\n            Average assists per match.\n        \"\"\"\n        return self.assists / self.matches if self.matches &gt; 0 else 0.0\n\n    @property\n    def avg_hero_damage(self) -&gt; float:\n        \"\"\"\n        Calculate average hero damage per match.\n\n        Returns\n        -------\n        float\n            Average hero damage per match.\n        \"\"\"\n        try:\n            return (\n                float(self.total_hero_damage) / self.matches\n                if self.matches &gt; 0\n                else 0.0\n            )\n        except (ValueError, TypeError):\n            return 0.0\n\n    @property\n    def mvp_rate(self) -&gt; float:\n        \"\"\"\n        Calculate rate of MVP awards.\n\n        Returns\n        -------\n        float\n            Percentage of matches where player was MVP, as a decimal.\n        \"\"\"\n        return self.mvps / self.matches if self.matches &gt; 0 else 0.0\n</code></pre>"},{"location":"api/players/#marvelrivalsapi.models.PlayerInfo.platform","title":"<code>platform</code>  <code>property</code>","text":"<p>Get the platform name based on the login OS code.</p> <p>Returns:</p> Type Description <code>str</code> <p>The platform name (PC, PS or Xbox).</p>"},{"location":"api/players/#marvelrivalsapi.models.PlayerInfo.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a PlayerInfo instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing player info data.</p> required <p>Returns:</p> Type Description <code>PlayerInfo</code> <p>A new PlayerInfo instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, typing.Any]) -&gt; PlayerInfo:\n    \"\"\"\n    Create a PlayerInfo instance from a dictionary.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing player info data.\n\n    Returns\n    -------\n    PlayerInfo\n        A new PlayerInfo instance.\n    \"\"\"\n    return cls(\n        name=data[\"name\"],\n        cur_head_icon_id=data[\"cur_head_icon_id\"],\n        rank_season=RankSeason.from_dict(data[\"rank_season\"]),\n        login_os=data[\"login_os\"],\n        raw_dict=data.copy(),\n    )\n</code></pre>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.avg_assists","title":"<code>avg_assists</code>  <code>property</code>","text":"<p>Calculate average assists per match.</p> <p>Returns:</p> Type Description <code>float</code> <p>Average assists per match.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.avg_deaths","title":"<code>avg_deaths</code>  <code>property</code>","text":"<p>Calculate average deaths per match.</p> <p>Returns:</p> Type Description <code>float</code> <p>Average deaths per match.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.avg_hero_damage","title":"<code>avg_hero_damage</code>  <code>property</code>","text":"<p>Calculate average hero damage per match.</p> <p>Returns:</p> Type Description <code>float</code> <p>Average hero damage per match.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.avg_kills","title":"<code>avg_kills</code>  <code>property</code>","text":"<p>Calculate average kills per match.</p> <p>Returns:</p> Type Description <code>float</code> <p>Average kills per match.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.kda","title":"<code>kda</code>  <code>property</code>","text":"<p>Calculate KDA (Kills + Assists / Deaths) ratio.</p> <p>Returns:</p> Type Description <code>float</code> <p>KDA ratio. Uses deaths = 1 if deaths = 0.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.mvp_rate","title":"<code>mvp_rate</code>  <code>property</code>","text":"<p>Calculate rate of MVP awards.</p> <p>Returns:</p> Type Description <code>float</code> <p>Percentage of matches where player was MVP, as a decimal.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.win_rate","title":"<code>win_rate</code>  <code>property</code>","text":"<p>Calculate win rate for this player.</p> <p>Returns:</p> Type Description <code>float</code> <p>Win rate as a decimal between 0 and 1.</p>"},{"location":"api/players/#marvelrivalsapi.models.LeaderboardPlayer.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a LeaderboardPlayer instance from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing leaderboard player data.</p> required <p>Returns:</p> Type Description <code>LeaderboardPlayer</code> <p>A new LeaderboardPlayer instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, typing.Any]) -&gt; LeaderboardPlayer:\n    \"\"\"\n    Create a LeaderboardPlayer instance from a dictionary.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing leaderboard player data.\n\n    Returns\n    -------\n    LeaderboardPlayer\n        A new LeaderboardPlayer instance.\n    \"\"\"\n    return cls(\n        info=PlayerInfo.from_dict(data[\"info\"]),\n        player_uid=data[\"player_uid\"],\n        matches=data[\"matches\"],\n        wins=data[\"wins\"],\n        kills=data[\"kills\"],\n        deaths=data[\"deaths\"],\n        assists=data[\"assists\"],\n        play_time=data[\"play_time\"],\n        total_hero_damage=data[\"total_hero_damage\"],\n        total_damage_taken=data[\"total_damage_taken\"],\n        total_hero_heal=data[\"total_hero_heal\"],\n        mvps=data[\"mvps\"],\n        svps=data[\"svps\"],\n        raw_dict=data.copy(),\n    )\n</code></pre>"},{"location":"api/utility/","title":"Utility","text":"<p>These are all the utility classes and functions you can use.</p> <p>               Bases: <code>Enum</code></p> <p>Enum of all heroes available in the Marvel Rivals API.</p> <p>This enumeration provides convenient access to all hero identifiers that can be used with the API. Hero names are standardized to lowercase with appropriate spacing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from marvelrivalsapi.utility import Heroes\n&gt;&gt;&gt; Heroes.SPIDER_MAN.value\n'spider-man'\n</code></pre> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>class Heroes(Enum):\n    \"\"\"\n    Enum of all heroes available in the Marvel Rivals API.\n\n    This enumeration provides convenient access to all hero identifiers\n    that can be used with the API. Hero names are standardized to lowercase\n    with appropriate spacing.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from marvelrivalsapi.utility import Heroes\n    &gt;&gt;&gt; Heroes.SPIDER_MAN.value\n    'spider-man'\n    \"\"\"\n\n    HULK = \"hulk\"\n    THE_PUNISHER = \"the punisher\"\n    STORM = \"storm\"\n    LOKI = \"loki\"\n    HUMAN_TORCH = \"human torch\"\n    DOCTOR_STRANGE = \"doctor strange\"\n    MANTIS = \"mantis\"\n    HAWKEYE = \"hawkeye\"\n    CAPTAIN_AMERICA = \"captain america\"\n    ROCKET_RACCOON = \"rocket raccoon\"\n    HELA = \"hela\"\n    CLOAK_AND_DAGGER = \"cloak &amp; dagger\"\n    BLACK_PANTHER = \"black panther\"\n    GROOT = \"groot\"\n    MAGIK = \"magik\"\n    MOON_KNIGHT = \"moon knight\"\n    LUNA_SNOW = \"luna snow\"\n    SQUIRREL_GIRL = \"squirrel girl\"\n    BLACK_WIDOW = \"black widow\"\n    IRON_MAN = \"iron man\"\n    VENOM = \"venom\"\n    SPIDER_MAN = \"spider-man\"\n    MAGNETO = \"magneto\"\n    SCARLET_WITCH = \"scarlet witch\"\n    THOR = \"thor\"\n    MISTER_FANTASTIC = \"mister fantastic\"\n    WINTER_SOLDIER = \"winter soldier\"\n    PENI_PARKER = \"peni parker\"\n    STAR_LORD = \"star-lord\"\n    NAMOR = \"namor\"\n    ADAM_WARLOCK = \"adam warlock\"\n    JEFF_THE_LAND_SHARK = \"jeff the land shark\"\n    PSYLOCKE = \"psylocke\"\n    WOLVERINE = \"wolverine\"\n    INVISIBLE_WOMAN = \"invisible woman\"\n    THE_THING = \"the thing\"\n    IRON_FIST = \"iron fist\"\n    EMMA_FROST = \"emma frost\"\n</code></pre> <p>Returns the full URL for an image resource.</p> <p>This function prepends the base image URL to the provided image path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The relative path of the image resource.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The complete URL to the image resource.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from marvelrivalsapi.utility import image\n&gt;&gt;&gt; image(\"/heroes/spider-man/icon.png\")\n'https://marvelrivalsapi.com/rivals/heroes/spider-man/icon.png'\n</code></pre> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>def image(url: str) -&gt; str:\n    \"\"\"\n    Returns the full URL for an image resource.\n\n    This function prepends the base image URL to the provided image path.\n\n    Parameters\n    ----------\n    url : str\n        The relative path of the image resource.\n\n    Returns\n    -------\n    str\n        The complete URL to the image resource.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from marvelrivalsapi.utility import image\n    &gt;&gt;&gt; image(\"/heroes/spider-man/icon.png\")\n    'https://marvelrivalsapi.com/rivals/heroes/spider-man/icon.png'\n    \"\"\"\n    return f\"{Endpoints.BASE_IMAGE_URL()}{url.split('rivals')[1]}\"\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by the MarvelRivalsAPI.</p> <p>This exception is raised when an API request fails due to an error returned by the server.</p> <p>Parameters:</p> Name Type Description Default <code>res</code> <code>Response</code> <p>The HTTP response that resulted in the error.</p> required <p>Attributes:</p> Name Type Description <code>response</code> <code>Response</code> <p>The HTTP response object containing error details.</p> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>class MarvelRivalsAPIError(Exception):\n    \"\"\"\n    Base class for all exceptions raised by the MarvelRivalsAPI.\n\n    This exception is raised when an API request fails due to an error\n    returned by the server.\n\n    Parameters\n    ----------\n    res : httpx.Response\n        The HTTP response that resulted in the error.\n\n    Attributes\n    ----------\n    response : httpx.Response\n        The HTTP response object containing error details.\n    \"\"\"\n\n    def __init__(self, res: httpx.Response) -&gt; None:\n        self.response = res\n        try:\n            message = f\"{res.status_code}: {res.json()['error']}\"\n        except:\n            message = f\"{res.status_code}: {res.text}\"\n        super().__init__(message)\n</code></pre>"}]}