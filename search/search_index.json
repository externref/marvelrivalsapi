{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MarvelRivalsAPI","text":"<p>Opinionated python API Wrapper for the Unofficial Marvel Rivals API.</p> <p>Warning</p> <p>Package still under development, installation commands won't work since the package is not published yet.  Use <code>git+https://github.com/externref/marvelrivals</code> as the package name to install from source.</p>"},{"location":"#get-started","title":"GET STARTED","text":"<p>Read the elaborate tutorial to start developing with <code>marvelrivalsapi</code></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy to use API interface</li> <li>Support for both blocking and <code>async</code> workflows</li> <li>Type support with <code>mypy</code> and <code>pyright</code> check</li> </ul>"},{"location":"#coverage","title":"Coverage","text":"<ul> <li> All Heroes</li> <li> Get Hero</li> <li> Hero Stats</li> <li> Hero Leaderboard</li> <li> All Costumes</li> <li> Get Costume</li> <li> Items</li> <li> Maps</li> <li> Dynamic Stat data</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#api-key","title":"API Key","text":"<p>Before anything, you'd like to get a API key from the website.</p> <p>Note</p> <p>You might want to keep the API key as an environment variable instead of pasting it directly into source code in most cases. To do this, install the <code>python-dotenv</code> library and create a <code>.env</code> file in the same directory as your code file. </p> <p>.env <pre><code>API_KEY=\"abcd1234\"\n</code></pre> main.py <pre><code>import os\n\nimport dotenv\n\ndotenv.load_dotenv()\n\nKEY = os.environ[\"API_KEY\"]\n</code></pre></p>"},{"location":"tutorial/#installing-the-library","title":"Installing the library","text":"pippoetryuv <pre><code>pip install marvelrivalsapi\n</code></pre> <pre><code>poetry add marvelrivalsapi\n</code></pre> <pre><code>uv add marvelrivalsapi\n</code></pre> <p>Use <code>pip</code> if you don't know what you're doing.</p>"},{"location":"tutorial/#first-steps","title":"First Steps","text":"<p>The client objects are the entry point to the API and you'll mostly be using them to perform all the package related tasks.</p> syncasyncasync context <pre><code>import marvelrivalsapi\n\nclient = marvelrivalsapi.MarvelRivalsClient(\"mykeyhere\")\n# rest of code\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    client = marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\")\n    # rest of code\n    await client.close()\n\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    async with marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\") as client:\n        # other stuff here\n        ...\n\nasyncio.run(main())\n</code></pre>"},{"location":"tutorial/#example-fetching-a-hero-data","title":"Example: Fetching a hero data","text":"syncasync <pre><code>import marvelrivalsapi\n\nclient = marvelrivalsapi.MarvelRivalsClient(\"mykeyhere\")\nspiderman = client.get_hero(marvelrivalsapi.Heroes.SPIDER_MAN)\nprint(spiderman)\n</code></pre> <pre><code>import asyncio\n\nimport marvelrivalsapi\n\ndef main():\n    client = marvelrivalsapi.AsyncMarvelRivalsClient(\"mykeyhere\")\n    spiderman = await client.get_hero(marvelrivalsapi.Heroes.SPIDER_MAN)\n    print(spiderman)\n    await client.close()\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/","title":"Client","text":""},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient","title":"<code>MarvelRivalsClient</code>","text":"<p>Client for interacting with the Marvel Rivals API.</p> <p>This client allows for fetching hero data from the Marvel Rivals API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to authenticate requests to the Marvel Rivals API.</p> required <p>Attributes:</p> Name Type Description <code>client</code> <code>Client</code> <p>The HTTP client used for making requests.</p> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>@define\nclass MarvelRivalsClient:\n    \"\"\"\n    Client for interacting with the Marvel Rivals API.\n\n    This client allows for fetching hero data from the Marvel Rivals API.\n\n    Parameters\n    ----------\n    api_key : str\n        The API key to authenticate requests to the Marvel Rivals API.\n\n    Attributes\n    ----------\n    client : httpx.Client\n        The HTTP client used for making requests.\n    \"\"\"\n\n    api_key: str\n    client: httpx.Client = field(init=False)\n\n    def __attrs_post_init__(self) -&gt; None:\n        self.client = httpx.Client(headers={\"x-api-key\": self.api_key})\n\n    def throw(self, res: httpx.Response) -&gt; None:\n        raise MarvelRivalsAPIError(res)\n\n    @typing.overload\n    def get_hero(self, hero: str | Heroes, *, error: bool) -&gt; Hero: ...\n\n    @typing.overload\n    def get_hero(self, hero: str | Heroes) -&gt; Hero | None: ...\n\n    def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n        \"\"\"\n        Get a hero by name or ID.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve.\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        Hero | None\n            The hero if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n        &gt;&gt;&gt; if hero:\n        ...     print(hero.name)\n        \"\"\"\n        response = self.client.get(Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero))\n        if response.status_code == 200:\n            return Hero.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    def get_all_heroes(self, *, error: bool) -&gt; list[Hero]: ...\n\n    @typing.overload\n    def get_all_heroes(self,) -&gt; list[Hero] | None: ...\n\n\n    def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n        \"\"\"\n        Get all available heroes.\n\n        Parameters\n        ----------\n        error : bool | None\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Hero] | None\n            A list of all heroes if successful, None if the request fails and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n        &gt;&gt;&gt; heroes = client.get_all_heroes()\n        &gt;&gt;&gt; if heroes:\n        ...     for hero in heroes:\n        ...         print(hero.name)\n        \"\"\"\n        response = self.client.get(Endpoints.ALL_HEROES())\n        if response.status_code == 200:\n            return [Hero.from_dict(hero) for hero in response.json()]\n        return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_all_heroes","title":"<code>get_all_heroes(*, error=False)</code>","text":"<pre><code>get_all_heroes(*, error: bool) -&gt; list[Hero]\n</code></pre><pre><code>get_all_heroes() -&gt; list[Hero] | None\n</code></pre> <p>Get all available heroes.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Hero] | None</code> <p>A list of all heroes if successful, None if the request fails and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; heroes = client.get_all_heroes()\n&gt;&gt;&gt; if heroes:\n...     for hero in heroes:\n...         print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n    \"\"\"\n    Get all available heroes.\n\n    Parameters\n    ----------\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Hero] | None\n        A list of all heroes if successful, None if the request fails and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; heroes = client.get_all_heroes()\n    &gt;&gt;&gt; if heroes:\n    ...     for hero in heroes:\n    ...         print(hero.name)\n    \"\"\"\n    response = self.client.get(Endpoints.ALL_HEROES())\n    if response.status_code == 200:\n        return [Hero.from_dict(hero) for hero in response.json()]\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.client.MarvelRivalsClient.get_hero","title":"<code>get_hero(hero, *, error=False)</code>","text":"<pre><code>get_hero(hero: str | Heroes, *, error: bool) -&gt; Hero\n</code></pre><pre><code>get_hero(hero: str | Heroes) -&gt; Hero | None\n</code></pre> <p>Get a hero by name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve.</p> required <code>error</code> <code>bool | None</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Hero | None</code> <p>The hero if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n&gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n&gt;&gt;&gt; if hero:\n...     print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\client.py</code> <pre><code>def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n    \"\"\"\n    Get a hero by name or ID.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve.\n    error : bool | None\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    Hero | None\n        The hero if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client = MarvelRivalsClient(\"your-api-key\")\n    &gt;&gt;&gt; hero = client.get_hero(\"Spider-Man\")\n    &gt;&gt;&gt; if hero:\n    ...     print(hero.name)\n    \"\"\"\n    response = self.client.get(Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero))\n    if response.status_code == 200:\n        return Hero.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient","title":"<code>AsyncMarvelRivalsClient</code>","text":"<p>Asynchronous client for interacting with the Marvel Rivals API.</p> <p>This client allows for fetching hero data from the Marvel Rivals API using asynchronous HTTP requests.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to authenticate requests to the Marvel Rivals API.</p> required <p>Attributes:</p> Name Type Description <code>client</code> <code>AsyncClient</code> <p>The HTTP client used for making asynchronous requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from marvelrivalsapi import AsyncMarvelRivalsClient\n&gt;&gt;&gt; \n&gt;&gt;&gt; async def main():\n...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n...     hero = await client.get_hero(\"spider-man\")\n...     print(hero.name)\n...     await client.close()\n&gt;&gt;&gt; \n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>@define\nclass AsyncMarvelRivalsClient:\n    \"\"\"\n    Asynchronous client for interacting with the Marvel Rivals API.\n\n    This client allows for fetching hero data from the Marvel Rivals API\n    using asynchronous HTTP requests.\n\n    Parameters\n    ----------\n    api_key : str\n        The API key to authenticate requests to the Marvel Rivals API.\n\n    Attributes\n    ----------\n    client : httpx.AsyncClient\n        The HTTP client used for making asynchronous requests.\n\n    Examples\n    --------\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; from marvelrivalsapi import AsyncMarvelRivalsClient\n    &gt;&gt;&gt; \n    &gt;&gt;&gt; async def main():\n    ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n    ...     hero = await client.get_hero(\"spider-man\")\n    ...     print(hero.name)\n    ...     await client.close()\n    &gt;&gt;&gt; \n    &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\n\n    api_key: str\n    client: httpx.AsyncClient = field(init=False)\n\n    def __attrs_post_init__(self) -&gt; None:\n        self.client = httpx.AsyncClient(headers={\"x-api-key\": self.api_key})\n\n    def throw(self, res: httpx.Response) -&gt; None:\n        raise MarvelRivalsAPIError(res)\n\n    @typing.overload\n    async def get_hero(self, hero: str | Heroes, *, error: bool) -&gt; Hero: ...\n\n    @typing.overload\n    async def get_hero(self, hero: str | Heroes) -&gt; Hero | None: ...\n\n    async def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n        \"\"\"\n        Get a hero by name or ID asynchronously.\n\n        Parameters\n        ----------\n        hero : str | Heroes\n            The hero name or ID to retrieve.\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        Hero | None\n            The hero if found, None if not found and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     hero = await client.get_hero(\"spider-man\")\n        ...     if hero:\n        ...         print(hero.name)\n        \"\"\"\n        response = await self.client.get(Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero))\n        if response.status_code == 200:\n            return Hero.from_dict(response.json())\n        return None if not error else self.throw(response)\n\n    @typing.overload\n    async def get_all_heroes(self, *, error: bool) -&gt; list[Hero]: ...\n\n    @typing.overload\n    async def get_all_heroes(self) -&gt; list[Hero] | None: ...\n\n    async def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n        \"\"\"\n        Get all available heroes asynchronously.\n\n        Parameters\n        ----------\n        error : bool\n            If True, raises an error on failure instead of returning None.\n            Default is False.\n\n        Returns\n        -------\n        list[Hero] | None\n            A list of all heroes if successful, None if the request fails and error is False.\n\n        Raises\n        ------\n        MarvelRivalsAPIError\n            When the API request fails and error is True.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n        ...     heroes = await client.get_all_heroes()\n        ...     if heroes:\n        ...         for hero in heroes:\n        ...             print(hero.name)\n        \"\"\"\n        response = await self.client.get(Endpoints.ALL_HEROES())\n        if response.status_code == 200:\n            return [Hero.from_dict(hero) for hero in response.json()]\n        return None if not error else  self.throw(response)\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        Close the HTTP client session.\n\n        This method should be called when the client is no longer needed to\n        properly clean up resources.\n\n        Examples\n        --------\n        &gt;&gt;&gt; async def main():\n        ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n        ...     # Use the client...\n        ...     await client.close()\n        \"\"\"\n        await self.client.aclose()\n\n    async def __aenter__(self) -&gt; AsyncMarvelRivalsClient:\n        return self\n\n    async def __aexit__(self, *args: typing.Any) -&gt; None:\n        await self.close()\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Close the HTTP client session.</p> <p>This method should be called when the client is no longer needed to properly clean up resources.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async def main():\n...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n...     # Use the client...\n...     await client.close()\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the HTTP client session.\n\n    This method should be called when the client is no longer needed to\n    properly clean up resources.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async def main():\n    ...     client = AsyncMarvelRivalsClient(\"your-api-key\")\n    ...     # Use the client...\n    ...     await client.close()\n    \"\"\"\n    await self.client.aclose()\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_all_heroes","title":"<code>get_all_heroes(*, error=False)</code>  <code>async</code>","text":"<pre><code>get_all_heroes(*, error: bool) -&gt; list[Hero]\n</code></pre><pre><code>get_all_heroes() -&gt; list[Hero] | None\n</code></pre> <p>Get all available heroes asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Hero] | None</code> <p>A list of all heroes if successful, None if the request fails and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     heroes = await client.get_all_heroes()\n...     if heroes:\n...         for hero in heroes:\n...             print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_all_heroes(self, *, error: bool = False) -&gt; list[Hero] | None:\n    \"\"\"\n    Get all available heroes asynchronously.\n\n    Parameters\n    ----------\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    list[Hero] | None\n        A list of all heroes if successful, None if the request fails and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     heroes = await client.get_all_heroes()\n    ...     if heroes:\n    ...         for hero in heroes:\n    ...             print(hero.name)\n    \"\"\"\n    response = await self.client.get(Endpoints.ALL_HEROES())\n    if response.status_code == 200:\n        return [Hero.from_dict(hero) for hero in response.json()]\n    return None if not error else  self.throw(response)\n</code></pre>"},{"location":"api/client/#marvelrivalsapi.async_client.AsyncMarvelRivalsClient.get_hero","title":"<code>get_hero(hero, *, error=False)</code>  <code>async</code>","text":"<pre><code>get_hero(hero: str | Heroes, *, error: bool) -&gt; Hero\n</code></pre><pre><code>get_hero(hero: str | Heroes) -&gt; Hero | None\n</code></pre> <p>Get a hero by name or ID asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>hero</code> <code>str | Heroes</code> <p>The hero name or ID to retrieve.</p> required <code>error</code> <code>bool</code> <p>If True, raises an error on failure instead of returning None. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Hero | None</code> <p>The hero if found, None if not found and error is False.</p> <p>Raises:</p> Type Description <code>MarvelRivalsAPIError</code> <p>When the API request fails and error is True.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n...     hero = await client.get_hero(\"spider-man\")\n...     if hero:\n...         print(hero.name)\n</code></pre> Source code in <code>marvelrivalsapi\\async_client.py</code> <pre><code>async def get_hero(self, hero: str | Heroes, *, error: bool = False) -&gt; Hero | None:\n    \"\"\"\n    Get a hero by name or ID asynchronously.\n\n    Parameters\n    ----------\n    hero : str | Heroes\n        The hero name or ID to retrieve.\n    error : bool\n        If True, raises an error on failure instead of returning None.\n        Default is False.\n\n    Returns\n    -------\n    Hero | None\n        The hero if found, None if not found and error is False.\n\n    Raises\n    ------\n    MarvelRivalsAPIError\n        When the API request fails and error is True.\n\n    Examples\n    --------\n    &gt;&gt;&gt; async with AsyncMarvelRivalsClient(\"your-api-key\") as client:\n    ...     hero = await client.get_hero(\"spider-man\")\n    ...     if hero:\n    ...         print(hero.name)\n    \"\"\"\n    response = await self.client.get(Endpoints.GET_HERO(hero.value if isinstance(hero, Heroes) else hero))\n    if response.status_code == 200:\n        return Hero.from_dict(response.json())\n    return None if not error else self.throw(response)\n</code></pre>"},{"location":"api/heroes/","title":"Heroes","text":"<p>Represents a hero character in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique hero identifier.</p> <code>name</code> <code>str</code> <p>Hero's display name.</p> <code>real_name</code> <code>str</code> <p>The hero's real-world identity.</p> <code>imageUrl</code> <code>str</code> <p>URL or path to the hero's image.</p> <code>role</code> <code>str</code> <p>The hero's role (e.g., Vanguard, Support).</p> <code>attack_type</code> <code>str</code> <p>Hero's attack type (e.g., Melee Heroes).</p> <code>team</code> <code>list[str]</code> <p>Factions or affiliations the hero belongs to (e.g., Avengers).</p> <code>difficulty</code> <code>str</code> <p>Difficulty rating of the hero (e.g., \"4\").</p> <code>bio</code> <code>str</code> <p>Short biography of the hero.</p> <code>lore</code> <code>str</code> <p>Extended lore/backstory of the hero.</p> <code>transformations</code> <code>list[Transformation]</code> <p>Different forms the hero can transform into.</p> <code>costumes</code> <code>list[Costume]</code> <p>List of hero costumes/skins.</p> <code>abilities</code> <code>list[Ability]</code> <p>List of the hero's abilities.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Hero:\n    \"\"\"\n    Represents a hero character in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique hero identifier.\n    name : str\n        Hero's display name.\n    real_name : str\n        The hero's real-world identity.\n    imageUrl : str\n        URL or path to the hero's image.\n    role : str\n        The hero's role (e.g., Vanguard, Support).\n    attack_type : str\n        Hero's attack type (e.g., Melee Heroes).\n    team : list[str]\n        Factions or affiliations the hero belongs to (e.g., Avengers).\n    difficulty : str\n        Difficulty rating of the hero (e.g., \"4\").\n    bio : str\n        Short biography of the hero.\n    lore : str\n        Extended lore/backstory of the hero.\n    transformations : list[Transformation]\n        Different forms the hero can transform into.\n    costumes : list[Costume]\n        List of hero costumes/skins.\n    abilities : list[Ability]\n        List of the hero's abilities.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n    id: str\n    name: str\n    real_name: str\n    imageUrl: str\n    role: str\n    attack_type: str\n    team: list[str] = field(factory=list)\n    difficulty: str\n    bio: str\n    lore: str\n    transformations: list[Transformation] = field(factory=list)\n    costumes: list[Costume] = field(factory=list)\n    abilities: list[Ability] = field(factory=list)\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Hero:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            real_name=data[\"real_name\"],\n            imageUrl=data[\"imageUrl\"],\n            role=data[\"role\"],\n            attack_type=data[\"attack_type\"],\n            team=data.get(\"team\", []),\n            difficulty=data[\"difficulty\"],\n            bio=data[\"bio\"],\n            lore=data[\"lore\"],\n            transformations=[\n                Transformation.from_dict(t) for t in data.get(\"transformations\", [])\n            ],\n            costumes=[Costume.from_dict(c) for c in data.get(\"costumes\", [])],\n            abilities=[Ability.from_dict(a) for a in data.get(\"abilities\", [])],\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>Represents a hero ability in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique ability identifier.</p> <code>icon</code> <code>str | None</code> <p>Icon path for the ability.</p> <code>name</code> <code>str | None</code> <p>Name of the ability.</p> <code>type</code> <code>str</code> <p>Type of the ability (e.g., Ultimate, Passive).</p> <code>isCollab</code> <code>bool</code> <p>Whether the ability is from a collaboration.</p> <code>description</code> <code>str | None</code> <p>Description of what the ability does.</p> <code>transformation_id</code> <code>str</code> <p>ID of the transformation this ability is tied to.</p> <code>additional_fields</code> <code>dict</code> <p>Dynamic key-value object with extra metadata. Keys vary per ability and may include: Key, Casting, Cooldown, Energy Cost, Special Effect, etc.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Ability:\n    \"\"\"\n    Represents a hero ability in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : int\n        Unique ability identifier.\n    icon : str | None\n        Icon path for the ability.\n    name : str | None\n        Name of the ability.\n    type : str\n        Type of the ability (e.g., Ultimate, Passive).\n    isCollab : bool\n        Whether the ability is from a collaboration.\n    description : str | None\n        Description of what the ability does.\n    transformation_id : str\n        ID of the transformation this ability is tied to.\n    additional_fields : dict\n        Dynamic key-value object with extra metadata. Keys vary per ability\n        and may include: Key, Casting, Cooldown, Energy Cost, Special Effect, etc.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n    id: int\n    icon: str | None\n    name: str | None\n    type: str\n    isCollab: bool\n    description: str | None\n    transformation_id: str\n    additional_fields: dict[str, object] = field(factory=dict)\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Ability:\n        return cls(\n            id=data[\"id\"],\n            icon=data.get(\"icon\"),\n            name=data.get(\"name\"),\n            type=data[\"type\"],\n            isCollab=data[\"isCollab\"],\n            description=data.get(\"description\"),\n            transformation_id=data[\"transformation_id\"],\n            additional_fields=data.get(\"additional_fields\", {}),\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>Represents a hero transformation in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the transformation.</p> <code>name</code> <code>str</code> <p>Name of the transformation (e.g., Bruce Banner).</p> <code>icon</code> <code>str</code> <p>Image path for the transformation.</p> <code>health</code> <code>str | None</code> <p>Health for the transformation, if available.</p> <code>movement_speed</code> <code>str | None</code> <p>Movement speed in meters per second (e.g., \"6m/s\").</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Transformation:\n    \"\"\"\n    Represents a hero transformation in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique identifier for the transformation.\n    name : str\n        Name of the transformation (e.g., Bruce Banner).\n    icon : str\n        Image path for the transformation.\n    health : str | None\n        Health for the transformation, if available.\n    movement_speed : str | None\n        Movement speed in meters per second (e.g., \"6m/s\").\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n    id: str\n    name: str\n    icon: str\n    health: str | None = None\n    movement_speed: str | None = None\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Transformation:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            icon=data[\"icon\"],\n            health=data.get(\"health\"),\n            movement_speed=data.get(\"movement_speed\"),\n            raw_dict=data.copy(),\n        )\n</code></pre> <p>Represents a hero costume/skin in Marvel Rivals.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the costume.</p> <code>name</code> <code>str</code> <p>Name of the costume.</p> <code>icon</code> <code>str</code> <p>Icon path for the costume.</p> <code>quality</code> <code>str</code> <p>Quality level (e.g., NO_QUALITY).</p> <code>description</code> <code>str</code> <p>Description of the costume.</p> <code>appearance</code> <code>str</code> <p>Visual details about the costume appearance.</p> <code>raw_dict</code> <code>dict</code> <p>The original JSON data used to create this instance.</p> Source code in <code>marvelrivalsapi\\models.py</code> <pre><code>@define(kw_only=True)\nclass Costume:\n    \"\"\"\n    Represents a hero costume/skin in Marvel Rivals.\n\n    Attributes\n    ----------\n    id : str\n        Unique identifier for the costume.\n    name : str\n        Name of the costume.\n    icon : str\n        Icon path for the costume.\n    quality : str\n        Quality level (e.g., NO_QUALITY).\n    description : str\n        Description of the costume.\n    appearance : str\n        Visual details about the costume appearance.\n    raw_dict : dict\n        The original JSON data used to create this instance.\n    \"\"\"\n    id: str\n    name: str\n    icon: str\n    quality: str\n    description: str\n    appearance: str\n    raw_dict: dict[str, typing.Any] = field(factory=dict)\n\n    @classmethod\n    def from_dict(cls, data: dict[str, typing.Any]) -&gt; Costume:\n        return cls(\n            id=data[\"id\"],\n            name=data[\"name\"],\n            icon=data[\"icon\"],\n            quality=data[\"quality\"],\n            description=data[\"description\"],\n            appearance=data[\"appearance\"],\n            raw_dict=data.copy(),\n        )\n</code></pre>"},{"location":"api/utility/","title":"Utility","text":"<p>These are all the utility classes and functions you can use.</p> <p>               Bases: <code>Enum</code></p> <p>Enum of all heroes available in the Marvel Rivals API.</p> <p>This enumeration provides convenient access to all hero identifiers that can be used with the API. Hero names are standardized to lowercase with appropriate spacing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from marvelrivalsapi.utility import Heroes\n&gt;&gt;&gt; Heroes.SPIDER_MAN.value\n'spider-man'\n</code></pre> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>class Heroes(Enum):\n    \"\"\"\n    Enum of all heroes available in the Marvel Rivals API.\n\n    This enumeration provides convenient access to all hero identifiers\n    that can be used with the API. Hero names are standardized to lowercase\n    with appropriate spacing.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from marvelrivalsapi.utility import Heroes\n    &gt;&gt;&gt; Heroes.SPIDER_MAN.value\n    'spider-man'\n    \"\"\"\n    HULK = \"hulk\"\n    THE_PUNISHER = \"the punisher\"\n    STORM = \"storm\"\n    LOKI = \"loki\"\n    HUMAN_TORCH = \"human torch\"\n    DOCTOR_STRANGE = \"doctor strange\"\n    MANTIS = \"mantis\"\n    HAWKEYE = \"hawkeye\"\n    CAPTAIN_AMERICA = \"captain america\"\n    ROCKET_RACCOON = \"rocket raccoon\"\n    HELA = \"hela\"\n    CLOAK_AND_DAGGER = \"cloak &amp; dagger\"\n    BLACK_PANTHER = \"black panther\"\n    GROOT = \"groot\"\n    MAGIK = \"magik\"\n    MOON_KNIGHT = \"moon knight\"\n    LUNA_SNOW = \"luna snow\"\n    SQUIRREL_GIRL = \"squirrel girl\"\n    BLACK_WIDOW = \"black widow\"\n    IRON_MAN = \"iron man\"\n    VENOM = \"venom\"\n    SPIDER_MAN = \"spider-man\"\n    MAGNETO = \"magneto\"\n    SCARLET_WITCH = \"scarlet witch\"\n    THOR = \"thor\"\n    MISTER_FANTASTIC = \"mister fantastic\"\n    WINTER_SOLDIER = \"winter soldier\"\n    PENI_PARKER = \"peni parker\"\n    STAR_LORD = \"star-lord\"\n    NAMOR = \"namor\"\n    ADAM_WARLOCK = \"adam warlock\"\n    JEFF_THE_LAND_SHARK = \"jeff the land shark\"\n    PSYLOCKE = \"psylocke\"\n    WOLVERINE = \"wolverine\"\n    INVISIBLE_WOMAN = \"invisible woman\"\n    THE_THING = \"the thing\"\n    IRON_FIST = \"iron fist\"\n    EMMA_FROST = \"emma frost\"\n</code></pre> <p>Returns the full URL for an image resource.</p> <p>This function prepends the base image URL to the provided image path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The relative path of the image resource.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The complete URL to the image resource.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from marvelrivalsapi.utility import image\n&gt;&gt;&gt; image(\"/heroes/spider-man/icon.png\")\n'https://marvelrivalsapi.com/rivals/heroes/spider-man/icon.png'\n</code></pre> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>def image(url: str) -&gt; str:\n    \"\"\"\n    Returns the full URL for an image resource.\n\n    This function prepends the base image URL to the provided image path.\n\n    Parameters\n    ----------\n    url : str\n        The relative path of the image resource.\n\n    Returns\n    -------\n    str\n        The complete URL to the image resource.\n\n    Examples\n    --------\n    &gt;&gt;&gt; from marvelrivalsapi.utility import image\n    &gt;&gt;&gt; image(\"/heroes/spider-man/icon.png\")\n    'https://marvelrivalsapi.com/rivals/heroes/spider-man/icon.png'\n    \"\"\"\n    return f\"{Endpoints.BASE_IMAGE_URL()}{url.split('rivals')[1]}\"\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions raised by the MarvelRivalsAPI.</p> <p>This exception is raised when an API request fails due to an error returned by the server.</p> <p>Parameters:</p> Name Type Description Default <code>res</code> <code>Response</code> <p>The HTTP response that resulted in the error.</p> required <p>Attributes:</p> Name Type Description <code>response</code> <code>Response</code> <p>The HTTP response object containing error details.</p> Source code in <code>marvelrivalsapi\\utility.py</code> <pre><code>class MarvelRivalsAPIError(Exception):\n    \"\"\"\n    Base class for all exceptions raised by the MarvelRivalsAPI.\n\n    This exception is raised when an API request fails due to an error\n    returned by the server.\n\n    Parameters\n    ----------\n    res : httpx.Response\n        The HTTP response that resulted in the error.\n\n    Attributes\n    ----------\n    response : httpx.Response\n        The HTTP response object containing error details.\n    \"\"\"\n\n    def __init__(self, res: httpx.Response) -&gt; None:\n        self.response = res\n        message = f\"{res.status_code}: {res.json()['error']}\"\n        super().__init__(message)\n</code></pre>"}]}